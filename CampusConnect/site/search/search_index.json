{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home: index.md About: about.md Development: index.md theme: readthedocs","title":"Home"},{"location":"api/","text":"Frontend API Client This module provides a TypeScript API client for communicating with the Flask backend API. Features Type Safety : Full TypeScript support with proper type definitions Error Handling : Custom ApiError class with detailed error information Consistent Interface : Unified API structure for all endpoints Backward Compatibility : Legacy functions getEvents() and joinEvent() for existing code Usage Basic Usage import { api } from '../api'; // Get all events const events = await api.events.getAll(); // Get specific event const event = await api.events.getById('1'); // Join an event await api.events.join('1', { userName: 'John Doe', userEmail: 'john@example.com' }); Legacy Functions import { getEvents, joinEvent } from '../api'; // Get all events (legacy) const events = await getEvents(); // Join event (legacy) await joinEvent({ eventId: '1', userName: 'John Doe', userEmail: 'john@example.com' }); Error Handling import { api, ApiError } from '../api'; try { const events = await api.events.getAll(); } catch (error) { if (error instanceof ApiError) { console.error('API Error:', error.message); console.error('Status:', error.status); console.error('Response:', error.response); } else { console.error('Unexpected error:', error); } } API Endpoints Events api.events.getAll() - Get all events api.events.getById(id) - Get event by ID api.events.join(id, userData) - Join an event Groups api.groups.getAll() - Get all groups api.groups.getById(id) - Get group by ID api.groups.join(id, userData) - Join a group s Posts api.posts.getAll() - Get all posts api.posts.create(postData) - Create a new post api.posts.like(id, userData) - Like a post Configuration The API client is configured to connect to http://localhost:5000/api by default. This can be modified in api.ts if needed. Types All TypeScript types are available from the main export: import type { Event, Group, Post, ApiResponse, JoinEventRequest } from '../api';","title":"API"},{"location":"api/#frontend-api-client","text":"This module provides a TypeScript API client for communicating with the Flask backend API.","title":"Frontend API Client"},{"location":"api/#features","text":"Type Safety : Full TypeScript support with proper type definitions Error Handling : Custom ApiError class with detailed error information Consistent Interface : Unified API structure for all endpoints Backward Compatibility : Legacy functions getEvents() and joinEvent() for existing code","title":"Features"},{"location":"api/#usage","text":"","title":"Usage"},{"location":"api/#basic-usage","text":"import { api } from '../api'; // Get all events const events = await api.events.getAll(); // Get specific event const event = await api.events.getById('1'); // Join an event await api.events.join('1', { userName: 'John Doe', userEmail: 'john@example.com' });","title":"Basic Usage"},{"location":"api/#legacy-functions","text":"import { getEvents, joinEvent } from '../api'; // Get all events (legacy) const events = await getEvents(); // Join event (legacy) await joinEvent({ eventId: '1', userName: 'John Doe', userEmail: 'john@example.com' });","title":"Legacy Functions"},{"location":"api/#error-handling","text":"import { api, ApiError } from '../api'; try { const events = await api.events.getAll(); } catch (error) { if (error instanceof ApiError) { console.error('API Error:', error.message); console.error('Status:', error.status); console.error('Response:', error.response); } else { console.error('Unexpected error:', error); } }","title":"Error Handling"},{"location":"api/#api-endpoints","text":"","title":"API Endpoints"},{"location":"api/#events","text":"api.events.getAll() - Get all events api.events.getById(id) - Get event by ID api.events.join(id, userData) - Join an event","title":"Events"},{"location":"api/#groups","text":"api.groups.getAll() - Get all groups api.groups.getById(id) - Get group by ID api.groups.join(id, userData) - Join a group s","title":"Groups"},{"location":"api/#posts","text":"api.posts.getAll() - Get all posts api.posts.create(postData) - Create a new post api.posts.like(id, userData) - Like a post","title":"Posts"},{"location":"api/#configuration","text":"The API client is configured to connect to http://localhost:5000/api by default. This can be modified in api.ts if needed.","title":"Configuration"},{"location":"api/#types","text":"All TypeScript types are available from the main export: import type { Event, Group, Post, ApiResponse, JoinEventRequest } from '../api';","title":"Types"},{"location":"authentication/","text":"CampusConnect Complete Authentication System This document describes the comprehensive authentication system implemented for CampusConnect, including signup with email validation, OTP-based login, password reset, profile management, and profile pictures. \ud83d\ude80 Features Authentication Features Campus Email Signup : Restricted to approved campus domains Form Validation : Real-time password strength and validation OTP-based Login : Secure email-based authentication Password Reset : Complete forgot password flow with OTP Session Management : JWT-like session tokens with automatic expiration Profile Management Profile Pictures : Upload, display, and delete profile pictures Profile Information : Full name, bio, phone, major, year of study Real-time Updates : Instant profile updates with validation Password Change : Secure password change functionality UI/UX Features Responsive Design : Mobile-friendly components Real-time Validation : Instant feedback on form fields Loading States : Clear loading indicators Error Handling : Comprehensive error messages Drag & Drop : Profile picture upload with drag & drop \ud83d\udcc1 Complete File Structure frontend/src/ \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 api.ts # Complete API client with all auth endpoints \u2502 \u251c\u2500\u2500 types.ts # All TypeScript type definitions \u2502 \u2514\u2500\u2500 index.ts # API exports \u251c\u2500\u2500 contexts/ \u2502 \u2514\u2500\u2500 AuthContext.tsx # Authentication context provider \u251c\u2500\u2500 hooks/ \u2502 \u251c\u2500\u2500 useOTP.ts # OTP management hook \u2502 \u251c\u2500\u2500 usePasswordReset.ts # Password reset flow hook \u2502 \u251c\u2500\u2500 useSignup.ts # Signup flow hook \u2502 \u251c\u2500\u2500 useProfile.ts # Profile management hook \u2502 \u2514\u2500\u2500 index.ts # Hook exports \u251c\u2500\u2500 components/auth/ \u2502 \u251c\u2500\u2500 LoginForm.tsx # Login form with OTP \u2502 \u251c\u2500\u2500 SignupForm.tsx # Complete signup form with validation \u2502 \u251c\u2500\u2500 ForgotPasswordForm.tsx # Password reset form \u2502 \u251c\u2500\u2500 OTPInput.tsx # Reusable OTP input component \u2502 \u251c\u2500\u2500 ProtectedRoute.tsx # Route protection component \u2502 \u251c\u2500\u2500 UserProfile.tsx # Complete profile management \u2502 \u251c\u2500\u2500 ProfilePicture.tsx # Profile picture component \u2502 \u2514\u2500\u2500 index.ts # Component exports \u251c\u2500\u2500 pages/ \u2502 \u251c\u2500\u2500 AuthPage.tsx # Main authentication page \u2502 \u251c\u2500\u2500 ProfilePage.tsx # Dedicated profile page \u2502 \u2514\u2500\u2500 AuthDemoPage.tsx # Demo/testing page \u2514\u2500\u2500 COMPLETE-AUTH-SYSTEM.md # This documentation backend/app/routes/ \u2514\u2500\u2500 auth.py # Complete backend with all endpoints \ud83d\udd27 Backend Endpoints Authentication Endpoints POST /api/auth/signup - Register new user with campus email validation POST /api/auth/send-otp - Send OTP to email POST /api/auth/verify-otp - Verify OTP code POST /api/auth/login - Login with email and OTP POST /api/auth/logout - Logout and invalidate session POST /api/auth/reset-password - Reset password with OTP Profile Management Endpoints GET /api/auth/profile - Get current user profile PUT /api/auth/profile - Update user profile information POST /api/auth/profile/picture - Upload profile picture DELETE /api/auth/profile/picture - Delete profile picture \ud83c\udfaf Complete Usage Examples Signup Flow import { useSignup } from '../hooks/useSignup'; function SignupExample() { const { state, signup } = useSignup(); const handleSignup = async () => { const success = await signup({ email: 'student@university.edu', full_name: 'John Doe', password: 'SecurePass123!', confirm_password: 'SecurePass123!', terms_accepted: true }); if (success) { console.log('Account created successfully'); } }; return ( <div> <button onClick={handleSignup} disabled={state.isLoading}> {state.isLoading ? 'Creating Account...' : 'Sign Up'} </button> {state.error && <p className=\"error\">{state.error}</p>} </div> ); } Profile Management import { useProfile } from '../hooks/useProfile'; import { ProfilePicture } from '../components/auth/ProfilePicture'; function ProfileExample() { const { state, updateProfile, uploadProfilePicture } = useProfile(); const handleUpdateProfile = async () => { const success = await updateProfile({ full_name: 'John Doe', bio: 'Computer Science student', major: 'Computer Science', year_of_study: 'Junior' }); if (success) { console.log('Profile updated'); } }; return ( <div> <ProfilePicture size=\"lg\" editable={true} /> <button onClick={handleUpdateProfile}> Update Profile </button> </div> ); } \ud83d\udd10 Enhanced Security Features Email Domain Validation Restricted to approved campus domains Real-time validation during signup Backend verification for security Password Security Minimum 8 characters Must contain uppercase, lowercase, number, and special character Real-time strength indicator Secure password change with current password verification Profile Picture Security File type validation (JPEG, PNG, WebP only) File size limits (5MB max) Secure upload with session verification Form Validation Real-time email validation Password strength checking Terms acceptance requirement Phone number format validation Bio character limits \ud83c\udfa8 Enhanced UI Components SignupForm Campus email validation with domain checking Real-time password strength indicator Password confirmation matching Terms and conditions acceptance Comprehensive form validation ProfilePicture Drag & drop file upload Image preview and cropping Upload progress indicators Delete functionality Fallback to user initials Enhanced UserProfile Editable profile sections Profile picture management Academic information (major, year) Contact information Bio and personal details \ud83d\udd04 Enhanced State Management Signup State interface SignupState { isLoading: boolean; error: string | null; isSignupComplete: boolean; currentStep: 'form' | 'otp' | 'success'; email: string; } Profile State interface ProfileState { isLoading: boolean; error: string | null; isUpdating: boolean; isUploadingPicture: boolean; } Enhanced Auth User interface AuthUser { user_id: string; email: string; session_token: string; full_name?: string; bio?: string; phone?: string; year_of_study?: string; major?: string; profile_picture_url?: string; created_at?: string; } \ud83d\ude80 Getting Started 1. Complete App Setup import { AuthProvider } from './contexts/AuthContext'; import { AuthPage } from './pages/AuthPage'; function App() { return ( <AuthProvider> <Routes> <Route path=\"/profile\" element={<ProfilePage />} /> <Route path=\"/auth-demo\" element={<AuthDemoPage />} /> {/* Other routes */} </Routes> </AuthProvider> ); } 2. Use Complete Authentication import { useAuth } from './contexts/AuthContext'; import { ProfilePicture } from './components/auth/ProfilePicture'; function MyComponent() { const { state, login, logout } = useAuth(); if (!state.isAuthenticated) { return <AuthPage />; } return ( <div> <ProfilePicture size=\"md\" editable={true} /> <p>Welcome, {state.user?.full_name || state.user?.email}!</p> <button onClick={logout}>Sign Out</button> </div> ); } \ud83d\udd27 Configuration Campus Email Domains Update allowed domains in useSignup.ts : const ALLOWED_EMAIL_DOMAINS = [ 'student.university.edu', 'university.edu', 'campus.edu', 'college.edu', // Add your campus domains ]; Profile Picture Settings Configure in useProfile.ts : const maxSize = 5 * 1024 * 1024; // 5MB const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']; \ud83e\uddea Testing Features Visit different pages to test: - / - Main app with authentication - /profile - Complete profile management - /auth-demo - API testing and debugging \ud83d\udcf1 Mobile Responsiveness All components are fully responsive: - Touch-friendly profile picture upload - Mobile-optimized forms - Responsive navigation with profile access - Mobile-friendly validation messages \ud83c\udf89 Complete Feature Set This authentication system now includes: \u2705 User Registration Campus email validation Password strength requirements Terms acceptance Real-time form validation \u2705 Authentication OTP-based login Session management Password reset flow Secure logout \u2705 Profile Management Complete profile editing Profile picture upload/delete Academic information Contact details Bio and personal info \u2705 Security Email domain restrictions Password complexity requirements Session token validation File upload security Form validation \u2705 User Experience Responsive design Real-time validation Loading states Error handling Drag & drop uploads Mobile optimization The system is production-ready and provides a complete user management solution for campus applications!","title":"Authentication"},{"location":"authentication/#campusconnect-complete-authentication-system","text":"This document describes the comprehensive authentication system implemented for CampusConnect, including signup with email validation, OTP-based login, password reset, profile management, and profile pictures.","title":"CampusConnect Complete Authentication System"},{"location":"authentication/#features","text":"","title":"\ud83d\ude80 Features"},{"location":"authentication/#authentication-features","text":"Campus Email Signup : Restricted to approved campus domains Form Validation : Real-time password strength and validation OTP-based Login : Secure email-based authentication Password Reset : Complete forgot password flow with OTP Session Management : JWT-like session tokens with automatic expiration","title":"Authentication Features"},{"location":"authentication/#profile-management","text":"Profile Pictures : Upload, display, and delete profile pictures Profile Information : Full name, bio, phone, major, year of study Real-time Updates : Instant profile updates with validation Password Change : Secure password change functionality","title":"Profile Management"},{"location":"authentication/#uiux-features","text":"Responsive Design : Mobile-friendly components Real-time Validation : Instant feedback on form fields Loading States : Clear loading indicators Error Handling : Comprehensive error messages Drag & Drop : Profile picture upload with drag & drop","title":"UI/UX Features"},{"location":"authentication/#complete-file-structure","text":"frontend/src/ \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 api.ts # Complete API client with all auth endpoints \u2502 \u251c\u2500\u2500 types.ts # All TypeScript type definitions \u2502 \u2514\u2500\u2500 index.ts # API exports \u251c\u2500\u2500 contexts/ \u2502 \u2514\u2500\u2500 AuthContext.tsx # Authentication context provider \u251c\u2500\u2500 hooks/ \u2502 \u251c\u2500\u2500 useOTP.ts # OTP management hook \u2502 \u251c\u2500\u2500 usePasswordReset.ts # Password reset flow hook \u2502 \u251c\u2500\u2500 useSignup.ts # Signup flow hook \u2502 \u251c\u2500\u2500 useProfile.ts # Profile management hook \u2502 \u2514\u2500\u2500 index.ts # Hook exports \u251c\u2500\u2500 components/auth/ \u2502 \u251c\u2500\u2500 LoginForm.tsx # Login form with OTP \u2502 \u251c\u2500\u2500 SignupForm.tsx # Complete signup form with validation \u2502 \u251c\u2500\u2500 ForgotPasswordForm.tsx # Password reset form \u2502 \u251c\u2500\u2500 OTPInput.tsx # Reusable OTP input component \u2502 \u251c\u2500\u2500 ProtectedRoute.tsx # Route protection component \u2502 \u251c\u2500\u2500 UserProfile.tsx # Complete profile management \u2502 \u251c\u2500\u2500 ProfilePicture.tsx # Profile picture component \u2502 \u2514\u2500\u2500 index.ts # Component exports \u251c\u2500\u2500 pages/ \u2502 \u251c\u2500\u2500 AuthPage.tsx # Main authentication page \u2502 \u251c\u2500\u2500 ProfilePage.tsx # Dedicated profile page \u2502 \u2514\u2500\u2500 AuthDemoPage.tsx # Demo/testing page \u2514\u2500\u2500 COMPLETE-AUTH-SYSTEM.md # This documentation backend/app/routes/ \u2514\u2500\u2500 auth.py # Complete backend with all endpoints","title":"\ud83d\udcc1 Complete File Structure"},{"location":"authentication/#backend-endpoints","text":"","title":"\ud83d\udd27 Backend Endpoints"},{"location":"authentication/#authentication-endpoints","text":"POST /api/auth/signup - Register new user with campus email validation POST /api/auth/send-otp - Send OTP to email POST /api/auth/verify-otp - Verify OTP code POST /api/auth/login - Login with email and OTP POST /api/auth/logout - Logout and invalidate session POST /api/auth/reset-password - Reset password with OTP","title":"Authentication Endpoints"},{"location":"authentication/#profile-management-endpoints","text":"GET /api/auth/profile - Get current user profile PUT /api/auth/profile - Update user profile information POST /api/auth/profile/picture - Upload profile picture DELETE /api/auth/profile/picture - Delete profile picture","title":"Profile Management Endpoints"},{"location":"authentication/#complete-usage-examples","text":"","title":"\ud83c\udfaf Complete Usage Examples"},{"location":"authentication/#signup-flow","text":"import { useSignup } from '../hooks/useSignup'; function SignupExample() { const { state, signup } = useSignup(); const handleSignup = async () => { const success = await signup({ email: 'student@university.edu', full_name: 'John Doe', password: 'SecurePass123!', confirm_password: 'SecurePass123!', terms_accepted: true }); if (success) { console.log('Account created successfully'); } }; return ( <div> <button onClick={handleSignup} disabled={state.isLoading}> {state.isLoading ? 'Creating Account...' : 'Sign Up'} </button> {state.error && <p className=\"error\">{state.error}</p>} </div> ); }","title":"Signup Flow"},{"location":"authentication/#profile-management_1","text":"import { useProfile } from '../hooks/useProfile'; import { ProfilePicture } from '../components/auth/ProfilePicture'; function ProfileExample() { const { state, updateProfile, uploadProfilePicture } = useProfile(); const handleUpdateProfile = async () => { const success = await updateProfile({ full_name: 'John Doe', bio: 'Computer Science student', major: 'Computer Science', year_of_study: 'Junior' }); if (success) { console.log('Profile updated'); } }; return ( <div> <ProfilePicture size=\"lg\" editable={true} /> <button onClick={handleUpdateProfile}> Update Profile </button> </div> ); }","title":"Profile Management"},{"location":"authentication/#enhanced-security-features","text":"","title":"\ud83d\udd10 Enhanced Security Features"},{"location":"authentication/#email-domain-validation","text":"Restricted to approved campus domains Real-time validation during signup Backend verification for security","title":"Email Domain Validation"},{"location":"authentication/#password-security","text":"Minimum 8 characters Must contain uppercase, lowercase, number, and special character Real-time strength indicator Secure password change with current password verification","title":"Password Security"},{"location":"authentication/#profile-picture-security","text":"File type validation (JPEG, PNG, WebP only) File size limits (5MB max) Secure upload with session verification","title":"Profile Picture Security"},{"location":"authentication/#form-validation","text":"Real-time email validation Password strength checking Terms acceptance requirement Phone number format validation Bio character limits","title":"Form Validation"},{"location":"authentication/#enhanced-ui-components","text":"","title":"\ud83c\udfa8 Enhanced UI Components"},{"location":"authentication/#signupform","text":"Campus email validation with domain checking Real-time password strength indicator Password confirmation matching Terms and conditions acceptance Comprehensive form validation","title":"SignupForm"},{"location":"authentication/#profilepicture","text":"Drag & drop file upload Image preview and cropping Upload progress indicators Delete functionality Fallback to user initials","title":"ProfilePicture"},{"location":"authentication/#enhanced-userprofile","text":"Editable profile sections Profile picture management Academic information (major, year) Contact information Bio and personal details","title":"Enhanced UserProfile"},{"location":"authentication/#enhanced-state-management","text":"","title":"\ud83d\udd04 Enhanced State Management"},{"location":"authentication/#signup-state","text":"interface SignupState { isLoading: boolean; error: string | null; isSignupComplete: boolean; currentStep: 'form' | 'otp' | 'success'; email: string; }","title":"Signup State"},{"location":"authentication/#profile-state","text":"interface ProfileState { isLoading: boolean; error: string | null; isUpdating: boolean; isUploadingPicture: boolean; }","title":"Profile State"},{"location":"authentication/#enhanced-auth-user","text":"interface AuthUser { user_id: string; email: string; session_token: string; full_name?: string; bio?: string; phone?: string; year_of_study?: string; major?: string; profile_picture_url?: string; created_at?: string; }","title":"Enhanced Auth User"},{"location":"authentication/#getting-started","text":"","title":"\ud83d\ude80 Getting Started"},{"location":"authentication/#1-complete-app-setup","text":"import { AuthProvider } from './contexts/AuthContext'; import { AuthPage } from './pages/AuthPage'; function App() { return ( <AuthProvider> <Routes> <Route path=\"/profile\" element={<ProfilePage />} /> <Route path=\"/auth-demo\" element={<AuthDemoPage />} /> {/* Other routes */} </Routes> </AuthProvider> ); }","title":"1. Complete App Setup"},{"location":"authentication/#2-use-complete-authentication","text":"import { useAuth } from './contexts/AuthContext'; import { ProfilePicture } from './components/auth/ProfilePicture'; function MyComponent() { const { state, login, logout } = useAuth(); if (!state.isAuthenticated) { return <AuthPage />; } return ( <div> <ProfilePicture size=\"md\" editable={true} /> <p>Welcome, {state.user?.full_name || state.user?.email}!</p> <button onClick={logout}>Sign Out</button> </div> ); }","title":"2. Use Complete Authentication"},{"location":"authentication/#configuration","text":"","title":"\ud83d\udd27 Configuration"},{"location":"authentication/#campus-email-domains","text":"Update allowed domains in useSignup.ts : const ALLOWED_EMAIL_DOMAINS = [ 'student.university.edu', 'university.edu', 'campus.edu', 'college.edu', // Add your campus domains ];","title":"Campus Email Domains"},{"location":"authentication/#profile-picture-settings","text":"Configure in useProfile.ts : const maxSize = 5 * 1024 * 1024; // 5MB const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];","title":"Profile Picture Settings"},{"location":"authentication/#testing-features","text":"Visit different pages to test: - / - Main app with authentication - /profile - Complete profile management - /auth-demo - API testing and debugging","title":"\ud83e\uddea Testing Features"},{"location":"authentication/#mobile-responsiveness","text":"All components are fully responsive: - Touch-friendly profile picture upload - Mobile-optimized forms - Responsive navigation with profile access - Mobile-friendly validation messages","title":"\ud83d\udcf1 Mobile Responsiveness"},{"location":"authentication/#complete-feature-set","text":"This authentication system now includes:","title":"\ud83c\udf89 Complete Feature Set"},{"location":"authentication/#user-registration","text":"Campus email validation Password strength requirements Terms acceptance Real-time form validation","title":"\u2705 User Registration"},{"location":"authentication/#authentication","text":"OTP-based login Session management Password reset flow Secure logout","title":"\u2705 Authentication"},{"location":"authentication/#profile-management_2","text":"Complete profile editing Profile picture upload/delete Academic information Contact details Bio and personal info","title":"\u2705 Profile Management"},{"location":"authentication/#security","text":"Email domain restrictions Password complexity requirements Session token validation File upload security Form validation","title":"\u2705 Security"},{"location":"authentication/#user-experience","text":"Responsive design Real-time validation Loading states Error handling Drag & drop uploads Mobile optimization The system is production-ready and provides a complete user management solution for campus applications!","title":"\u2705 User Experience"},{"location":"author/","text":"Authors: Team: whoami Contribution","title":"Author"},{"location":"author/#authors","text":"Team: whoami Contribution","title":"Authors:"},{"location":"contributing/","text":"Contributors Anish Poudel Utsav Bhandari Nikhil Giri Lusan Sapkota","title":"Contributing"},{"location":"contributing/#contributors","text":"Anish Poudel Utsav Bhandari Nikhil Giri Lusan Sapkota","title":"Contributors"},{"location":"development/","text":"Development Guide This document explains how to use the frontend API client in Campus Connect to communicate with the Flask backend. Overview The API client is written in TypeScript and provides a clean, type-safe interface to backend endpoints. It supports events, groups, and posts, and includes legacy functions for backward compatibility. Usage Basic Example import { api } from '../api'; // Get all events const events = await api.events.getAll(); // Get an event by ID const event = await api.events.getById('1'); // Join an event await api.events.join('1', { userName: 'John Doe', userEmail: 'john@example.com', }); ```` --- ### Legacy Functions ```ts import { getEvents, joinEvent } from '../api'; // Get events (legacy) const events = await getEvents(); // Join event (legacy) await joinEvent({ eventId: '1', userName: 'John Doe', userEmail: 'john@example.com', }); Error Handling import { api, ApiError } from '../api'; try { const events = await api.events.getAll(); } catch (error) { if (error instanceof ApiError) { console.error('API Error:', error.message); } else { console.error('Unexpected Error:', error); } } Endpoints Events getAll() , getById(id) , join(id, userData) Groups getAll() , getById(id) , join(id, userData) Posts getAll() , create(postData) , like(id, userData) All available under the api object. Configuration The API base URL is: http://localhost:5000/api You can change it in the api.ts file. Types The client exports useful types for better development experience: import type { Event, Group, Post, ApiResponse, JoinEventRequest } from '../api'; Summary Use api methods for all backend interactions. Handle errors using ApiError . TypeScript types ensure safe and clear development. Legacy functions are still available if needed. For questions or contributions, check the project README or contact the development team.","title":"Development"},{"location":"development/#development-guide","text":"This document explains how to use the frontend API client in Campus Connect to communicate with the Flask backend.","title":"Development Guide"},{"location":"development/#overview","text":"The API client is written in TypeScript and provides a clean, type-safe interface to backend endpoints. It supports events, groups, and posts, and includes legacy functions for backward compatibility.","title":"Overview"},{"location":"development/#usage","text":"","title":"Usage"},{"location":"development/#basic-example","text":"import { api } from '../api'; // Get all events const events = await api.events.getAll(); // Get an event by ID const event = await api.events.getById('1'); // Join an event await api.events.join('1', { userName: 'John Doe', userEmail: 'john@example.com', }); ```` --- ### Legacy Functions ```ts import { getEvents, joinEvent } from '../api'; // Get events (legacy) const events = await getEvents(); // Join event (legacy) await joinEvent({ eventId: '1', userName: 'John Doe', userEmail: 'john@example.com', });","title":"Basic Example"},{"location":"development/#error-handling","text":"import { api, ApiError } from '../api'; try { const events = await api.events.getAll(); } catch (error) { if (error instanceof ApiError) { console.error('API Error:', error.message); } else { console.error('Unexpected Error:', error); } }","title":"Error Handling"},{"location":"development/#endpoints","text":"Events getAll() , getById(id) , join(id, userData) Groups getAll() , getById(id) , join(id, userData) Posts getAll() , create(postData) , like(id, userData) All available under the api object.","title":"Endpoints"},{"location":"development/#configuration","text":"The API base URL is: http://localhost:5000/api You can change it in the api.ts file.","title":"Configuration"},{"location":"development/#types","text":"The client exports useful types for better development experience: import type { Event, Group, Post, ApiResponse, JoinEventRequest } from '../api';","title":"Types"},{"location":"development/#summary","text":"Use api methods for all backend interactions. Handle errors using ApiError . TypeScript types ensure safe and clear development. Legacy functions are still available if needed. For questions or contributions, check the project README or contact the development team.","title":"Summary"},{"location":"faq/","text":"Campus Social & Community Engagement \u2014 Website FAQ Last updated: 2025-08-15 \u00b7 Support: lusansapkota@gmail.com Using the site Q: What can I do on the site? : Browse events, view impact reports, read partner spotlights, and access resources. Q: Do I need to log in? : Only for admin/editors. Regular visitors can view everything without an account. Q: How do I search? : Use the top search bar or filter chips on Events/Resources pages. Content & updates Q: How often is content updated? : Events: weekly. Reports: each term. News/spotlights: monthly. Q: Where\u2019s the archive? : See Resources \u2192 Archive for past events, reports, and media. Accessibility Q: Is the site accessible? : We aim for WCAG 2.1 AA \u2014 keyboard-friendly navigation, alt text, captions, and high contrast. Report issues via Accessibility Feedback in the footer. Tech & compatibility Q: Which browsers are supported? : Latest Chrome, Edge, Firefox, and Safari; mobile-friendly on iOS/Android. Q: Why is something not loading? : Try hard refresh (Ctrl/Cmd+Shift+R). If it persists, check the status page and send the page URL + screenshot to support. Data & privacy Q: What data do you collect? : Anonymous analytics (page views, device type) and error logs. See Privacy Notice in the footer. Reporting issues Q: How do I report a bug or typo? : Click Report an issue in the footer; include URL, steps, and screenshot. Q: Security or privacy concern? : Email lusansapkota@gmail.com (do not post publicly). Roadmap & feedback Q: What\u2019s coming next? : See Roadmap page (dark mode, improved calendar, downloadable impact data). Q: Can I request a feature? : Yes \u2014 use Feature Request in the footer.","title":"FAQ"},{"location":"faq/#campus-social-community-engagement-website-faq","text":"Last updated: 2025-08-15 \u00b7 Support: lusansapkota@gmail.com","title":"Campus Social &amp; Community Engagement \u2014 Website FAQ"},{"location":"faq/#using-the-site","text":"Q: What can I do on the site? : Browse events, view impact reports, read partner spotlights, and access resources. Q: Do I need to log in? : Only for admin/editors. Regular visitors can view everything without an account. Q: How do I search? : Use the top search bar or filter chips on Events/Resources pages.","title":"Using the site"},{"location":"faq/#content-updates","text":"Q: How often is content updated? : Events: weekly. Reports: each term. News/spotlights: monthly. Q: Where\u2019s the archive? : See Resources \u2192 Archive for past events, reports, and media.","title":"Content &amp; updates"},{"location":"faq/#accessibility","text":"Q: Is the site accessible? : We aim for WCAG 2.1 AA \u2014 keyboard-friendly navigation, alt text, captions, and high contrast. Report issues via Accessibility Feedback in the footer.","title":"Accessibility"},{"location":"faq/#tech-compatibility","text":"Q: Which browsers are supported? : Latest Chrome, Edge, Firefox, and Safari; mobile-friendly on iOS/Android. Q: Why is something not loading? : Try hard refresh (Ctrl/Cmd+Shift+R). If it persists, check the status page and send the page URL + screenshot to support.","title":"Tech &amp; compatibility"},{"location":"faq/#data-privacy","text":"Q: What data do you collect? : Anonymous analytics (page views, device type) and error logs. See Privacy Notice in the footer.","title":"Data &amp; privacy"},{"location":"faq/#reporting-issues","text":"Q: How do I report a bug or typo? : Click Report an issue in the footer; include URL, steps, and screenshot. Q: Security or privacy concern? : Email lusansapkota@gmail.com (do not post publicly).","title":"Reporting issues"},{"location":"faq/#roadmap-feedback","text":"Q: What\u2019s coming next? : See Roadmap page (dark mode, improved calendar, downloadable impact data). Q: Can I request a feature? : Yes \u2014 use Feature Request in the footer.","title":"Roadmap &amp; feedback"},{"location":"features/","text":"Features Overview Campus Connect offers a secure, user-friendly authentication system with rich profile management and responsive UI components. \ud83d\ude80 Authentication Features OTP-Based Login Secure email login without passwords, using one-time passwords (OTPs). Password Reset Complete forgot-password flow with OTP verification. Session Management JWT-like tokens with automatic expiration for secure sessions. React Context & Custom Hooks Centralized auth state and reusable hooks for OTP and password reset flows. TypeScript Support Full type safety throughout the authentication system. \ud83d\udc64 User Registration Campus email validation to restrict signup. Password strength and complexity requirements. Terms and conditions acceptance. Real-time form validation for immediate feedback. \ud83d\udee1\ufe0f Security Email domain restrictions for authorized users only. Session token validation. Secure file uploads with drag & drop support. Comprehensive form validation and error handling. \ud83d\udcf1 Responsive UI & User Experience Mobile-optimized forms and navigation. Touch-friendly profile picture upload with drag & drop. Responsive validation messages and loading states. Clear and informative error messages. \ud83d\udcdd Profile Management Complete profile editing including academic info and personal bio. Profile picture upload and deletion. Real-time updates with instant validation. Secure password change functionality. Summary Campus Connect\u2019s authentication system combines security, ease of use, and responsive design to provide a seamless experience across devices. It supports OTP login, session management, and robust profile handling \u2014 all with strong type safety and user feedback mechanisms. For detailed usage and development info, see Usage and Development .","title":"Features"},{"location":"features/#features-overview","text":"Campus Connect offers a secure, user-friendly authentication system with rich profile management and responsive UI components.","title":"Features Overview"},{"location":"features/#authentication-features","text":"OTP-Based Login Secure email login without passwords, using one-time passwords (OTPs). Password Reset Complete forgot-password flow with OTP verification. Session Management JWT-like tokens with automatic expiration for secure sessions. React Context & Custom Hooks Centralized auth state and reusable hooks for OTP and password reset flows. TypeScript Support Full type safety throughout the authentication system.","title":"\ud83d\ude80 Authentication Features"},{"location":"features/#user-registration","text":"Campus email validation to restrict signup. Password strength and complexity requirements. Terms and conditions acceptance. Real-time form validation for immediate feedback.","title":"\ud83d\udc64 User Registration"},{"location":"features/#security","text":"Email domain restrictions for authorized users only. Session token validation. Secure file uploads with drag & drop support. Comprehensive form validation and error handling.","title":"\ud83d\udee1\ufe0f Security"},{"location":"features/#responsive-ui-user-experience","text":"Mobile-optimized forms and navigation. Touch-friendly profile picture upload with drag & drop. Responsive validation messages and loading states. Clear and informative error messages.","title":"\ud83d\udcf1 Responsive UI &amp; User Experience"},{"location":"features/#profile-management","text":"Complete profile editing including academic info and personal bio. Profile picture upload and deletion. Real-time updates with instant validation. Secure password change functionality.","title":"\ud83d\udcdd Profile Management"},{"location":"features/#summary","text":"Campus Connect\u2019s authentication system combines security, ease of use, and responsive design to provide a seamless experience across devices. It supports OTP login, session management, and robust profile handling \u2014 all with strong type safety and user feedback mechanisms. For detailed usage and development info, see Usage and Development .","title":"Summary"},{"location":"futurechanges/","text":"Future Changes This section outlines planned improvements and upcoming features for the authentication system of Campus Connect . These enhancements aim to increase security, maintainability, and usability for both developers and users. \ud83d\udd10 OTP-Based Authentication Improve rate-limiting to prevent OTP brute-force attacks. Add support for multi-channel OTP delivery (e.g., SMS). Allow OTP auto-fill on supported browsers and devices. \ud83d\udd04 Password Reset Add CAPTCHA protection to the \"Forgot Password\" form. Include expiration countdown for OTP in the UI. Notify users via email if password reset was requested. \ud83d\udd12 Session Management Implement refresh tokens with silent token renewal. Store tokens securely using HttpOnly cookies. Add support for single-session logins (logout from other devices). \ud83e\udde0 React Context Optimize performance by minimizing unnecessary re-renders. Integrate user roles/permissions into the context. Provide context hydration on page reloads. \ud83e\udde9 Custom Hooks Extract validation logic into reusable utilities. Add loading, success, and error state indicators. Improve test coverage for each hook. \ud83d\udee1 TypeScript Support Improve TypeScript types for API responses and form data. Migrate remaining JavaScript utility files to TypeScript. Introduce strict mode for better type safety. \ud83d\udcf1 Responsive UI Improve accessibility (ARIA roles, keyboard navigation). Add dark mode support. Refactor components for better responsiveness on tablets. \u26a0\ufe0f Error Handling Introduce user-friendly error modals and alerts. Add logging and monitoring for backend failures. Provide contextual error messages tied to specific form fields. Stay tuned! These changes are in the pipeline to improve both user experience and system robustness.","title":"Future Changes"},{"location":"futurechanges/#future-changes","text":"This section outlines planned improvements and upcoming features for the authentication system of Campus Connect . These enhancements aim to increase security, maintainability, and usability for both developers and users.","title":"Future Changes"},{"location":"futurechanges/#otp-based-authentication","text":"Improve rate-limiting to prevent OTP brute-force attacks. Add support for multi-channel OTP delivery (e.g., SMS). Allow OTP auto-fill on supported browsers and devices.","title":"\ud83d\udd10 OTP-Based Authentication"},{"location":"futurechanges/#password-reset","text":"Add CAPTCHA protection to the \"Forgot Password\" form. Include expiration countdown for OTP in the UI. Notify users via email if password reset was requested.","title":"\ud83d\udd04 Password Reset"},{"location":"futurechanges/#session-management","text":"Implement refresh tokens with silent token renewal. Store tokens securely using HttpOnly cookies. Add support for single-session logins (logout from other devices).","title":"\ud83d\udd12 Session Management"},{"location":"futurechanges/#react-context","text":"Optimize performance by minimizing unnecessary re-renders. Integrate user roles/permissions into the context. Provide context hydration on page reloads.","title":"\ud83e\udde0 React Context"},{"location":"futurechanges/#custom-hooks","text":"Extract validation logic into reusable utilities. Add loading, success, and error state indicators. Improve test coverage for each hook.","title":"\ud83e\udde9 Custom Hooks"},{"location":"futurechanges/#typescript-support","text":"Improve TypeScript types for API responses and form data. Migrate remaining JavaScript utility files to TypeScript. Introduce strict mode for better type safety.","title":"\ud83d\udee1 TypeScript Support"},{"location":"futurechanges/#responsive-ui","text":"Improve accessibility (ARIA roles, keyboard navigation). Add dark mode support. Refactor components for better responsiveness on tablets.","title":"\ud83d\udcf1 Responsive UI"},{"location":"futurechanges/#error-handling","text":"Introduce user-friendly error modals and alerts. Add logging and monitoring for backend failures. Provide contextual error messages tied to specific form fields. Stay tuned! These changes are in the pipeline to improve both user experience and system robustness.","title":"\u26a0\ufe0f Error Handling"},{"location":"images/","text":"","title":"Images"},{"location":"installiation/","text":"CampusConnect Installation Guide Prerequisites Node.js (v18+) Python (v3.9+) pip (Python package manager) Backend Setup cd backend python3 -m venv venv source venv/bin/activate pip install -r requirements.txt python init_database.py #Optional python run.py Frontend Setup cd frontend npm install npm run dev Environment Variables Copy .env.example to .env in the backend folder and update values as needed. cp .env.example .env Database Initialization Run python backend/init_database.py to create tables and sample data. Accessing the App Frontend: http://localhost:5173 Backend API: http://localhost:5000/api","title":"Installation"},{"location":"installiation/#campusconnect-installation-guide","text":"","title":"CampusConnect Installation Guide"},{"location":"installiation/#prerequisites","text":"Node.js (v18+) Python (v3.9+) pip (Python package manager)","title":"Prerequisites"},{"location":"installiation/#backend-setup","text":"cd backend python3 -m venv venv source venv/bin/activate pip install -r requirements.txt python init_database.py #Optional python run.py","title":"Backend Setup"},{"location":"installiation/#frontend-setup","text":"cd frontend npm install npm run dev","title":"Frontend Setup"},{"location":"installiation/#environment-variables","text":"Copy .env.example to .env in the backend folder and update values as needed. cp .env.example .env","title":"Environment Variables"},{"location":"installiation/#database-initialization","text":"Run python backend/init_database.py to create tables and sample data.","title":"Database Initialization"},{"location":"installiation/#accessing-the-app","text":"Frontend: http://localhost:5173 Backend API: http://localhost:5000/api","title":"Accessing the App"},{"location":"license/","text":"MIT License Copyright (c) 2025 Lusan Sapkota Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Footer","title":"License"},{"location":"uninstall/","text":"Uninstallation Guide This guide explains how to safely remove the CampusConnect application from your system, including both the backend and frontend components. \ud83d\udd27 Prerequisites Before uninstalling, ensure: The app is not currently running. You've backed up any important data if needed. \ud83d\uddd1\ufe0f Uninstall Backend 1. Deactivate the Virtual Environment If it's still active: deactivate 2. Remove the Backend Directory rm -rf backend Or manually delete the backend/ folder from your file system. \ud83e\uddfc Uninstall Frontend 1. Stop the Dev Server (if running) Use Ctrl+C in the terminal where npm run dev was running. 2. Remove the Frontend Directory rm -rf frontend Or delete the frontend/ folder manually. \ud83e\uddf9 Clean Up Dependencies (Optional) If you installed global packages for development, you may uninstall them: npm uninstall -g <package-name> pip uninstall <package-name> \ud83d\uddc3\ufe0f Remove Environment Files (Optional) To delete environment configs: rm backend/.env \ud83e\udde8 Remove Database (Optional) If you created a local database: rm backend/database.db Or remove any other database files you created manually. \u2705 Uninstallation Complete CampusConnect has now been fully removed from your system. You can reinstall it at any time by following the Installation Guide .","title":"Uninstall"},{"location":"uninstall/#uninstallation-guide","text":"This guide explains how to safely remove the CampusConnect application from your system, including both the backend and frontend components.","title":"Uninstallation Guide"},{"location":"uninstall/#prerequisites","text":"Before uninstalling, ensure: The app is not currently running. You've backed up any important data if needed.","title":"\ud83d\udd27 Prerequisites"},{"location":"uninstall/#uninstall-backend","text":"","title":"\ud83d\uddd1\ufe0f Uninstall Backend"},{"location":"uninstall/#1-deactivate-the-virtual-environment","text":"If it's still active: deactivate","title":"1. Deactivate the Virtual Environment"},{"location":"uninstall/#2-remove-the-backend-directory","text":"rm -rf backend Or manually delete the backend/ folder from your file system.","title":"2. Remove the Backend Directory"},{"location":"uninstall/#uninstall-frontend","text":"","title":"\ud83e\uddfc Uninstall Frontend"},{"location":"uninstall/#1-stop-the-dev-server-if-running","text":"Use Ctrl+C in the terminal where npm run dev was running.","title":"1. Stop the Dev Server (if running)"},{"location":"uninstall/#2-remove-the-frontend-directory","text":"rm -rf frontend Or delete the frontend/ folder manually.","title":"2. Remove the Frontend Directory"},{"location":"uninstall/#clean-up-dependencies-optional","text":"If you installed global packages for development, you may uninstall them: npm uninstall -g <package-name> pip uninstall <package-name>","title":"\ud83e\uddf9 Clean Up Dependencies (Optional)"},{"location":"uninstall/#remove-environment-files-optional","text":"To delete environment configs: rm backend/.env","title":"\ud83d\uddc3\ufe0f Remove Environment Files (Optional)"},{"location":"uninstall/#remove-database-optional","text":"If you created a local database: rm backend/database.db Or remove any other database files you created manually.","title":"\ud83e\udde8 Remove Database (Optional)"},{"location":"uninstall/#uninstallation-complete","text":"CampusConnect has now been fully removed from your system. You can reinstall it at any time by following the Installation Guide .","title":"\u2705 Uninstallation Complete"},{"location":"usage/","text":"Usage Guide This guide explains how to use the authentication features in Campus Connect . \ud83d\udd10 Login with OTP Enter your email. Receive a one-time password (OTP) by email. Enter the OTP to log in. No password is needed. Just your email and the OTP. \ud83d\udd01 Forgot Password Enter your email to reset your password. Receive an OTP by email. Enter the OTP and set a new password. This helps if you've forgotten your password. \ud83d\udd12 Sessions After logging in, a session token is stored automatically. You stay logged in until the token expires or you log out. You can log out anytime to clear your session.","title":"Usage"},{"location":"usage/#usage-guide","text":"This guide explains how to use the authentication features in Campus Connect .","title":"Usage Guide"},{"location":"usage/#login-with-otp","text":"Enter your email. Receive a one-time password (OTP) by email. Enter the OTP to log in. No password is needed. Just your email and the OTP.","title":"\ud83d\udd10 Login with OTP"},{"location":"usage/#forgot-password","text":"Enter your email to reset your password. Receive an OTP by email. Enter the OTP and set a new password. This helps if you've forgotten your password.","title":"\ud83d\udd01 Forgot Password"},{"location":"usage/#sessions","text":"After logging in, a session token is stored automatically. You stay logged in until the token expires or you log out. You can log out anytime to clear your session.","title":"\ud83d\udd12 Sessions"}]}